
package com.reconinstruments.itemhost;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.widget.RemoteViews;
import android.util.Log;

import com.reconinstruments.modservice.ReconMODServiceMessage;

import java.text.SimpleDateFormat;
import java.util.TimeZone;
import com.reconinstruments.utils.stats.ActivityUtil;
import com.reconinstruments.utils.DeviceUtils;


/**
 * <code>ItemHostService</code> is designed to demo how to produce and broadcast
 * a remoteView in a service.
 */
public class ItemHostService extends Service {

    private static final String TAG = ItemHostService.class.getSimpleName();
    public final static String COLUMN_HANDLER_EXTRA = "com.reconinstruments.ColumnHandler";
    public final static String INTENT_ACTION = "com.reconinstruments.itemhost.RECON_WIDGET";
    public final static String EXTRA_VIEW = "REMOTE_VIEW";
    public final static String EXTRA_TAG = "TAG";
    public final static String EXTRA_UP_LAUNCHER = "UP_LAUNCHER";
    public final static String EXTRA_DOWN_LAUNCHER = "DOWN_LAUNCHER";

    private final static String DEFAULT_LAUNCHER = "com.reconinstruments.connectdevice.CONNECT";
    
    //unique tag for pre defined system remote view
    //generated by http://www.famkruithof.net/uuid/uuidgen version 4
    public static final String TAG_APPS = "D61BD569-0ED9-467D-845D-DD6A63A2C99A";
    public static final String TAG_ACTIVITIES = "EA7DC57D-928B-4BD0-BAF8-24CF8D68981B";
    public static final String TAG_NEW_ACTIVITY = "A815909C-4E5A-4D85-990E-C9461B5BB909";
    public static final String TAG_NOTIFICATIONS = "2723A1F8-4221-436A-88B1-16536BC362F8";
    public static final String TAG_SETTINGS = "0AD3BB1B-2355-4FAC-8B80-FF14BCD284D4";
    
    private final Handler itemHostHandler = new Handler();

    public static final String NO_DURATION = "--";
    private String mDuration = NO_DURATION;
    public static final String CONTINUE_DAY = "Continue Day";

    private static String NEW_ACTIVITY_NON_SNOW ="New Activity";
    private static String NEW_ACTIVITY_SNOW ="Start Day";
    private final boolean isDuringActivity() {
	return !mDuration.equals(NO_DURATION);
    }
    
    //generate the pre defined remote view and broadcast out.
    private Runnable broadcastRemoteView = new Runnable() {
        @Override
        public void run() {
            Log.v(TAG,"broadcast remote views");
            Intent intent = null;
            Intent downLauncher = null;
            downLauncher = new Intent("com.reconinstruments.jetappsettings.apps");
            generateAndBroadcastRemoteViewIntent(R.layout.item_host_item, TAG_APPS, getString(R.string.my_apps), null, downLauncher);
            generateAndBroadcastRemoteViewIntent(R.layout.item_host_item, TAG_ACTIVITIES, getString(R.string.my_activities), null, new Intent("com.reconinstruments.myactivities"));
            generateRelevantSportsActivityViewAndBroadcast(); // Special treatment for Sports Activity
            downLauncher = new Intent("com.reconinstruments.messagecenter.frontend");
            generateAndBroadcastRemoteViewIntent(R.layout.item_host_item, TAG_NOTIFICATIONS, getString(R.string.notifications), null, downLauncher);
            downLauncher = new Intent("com.reconinstruments.jetappsettings.settings");
            generateAndBroadcastRemoteViewIntent(R.layout.item_host_item, TAG_SETTINGS, getString(R.string.settings), null, downLauncher);
        }
    };

    /**
     * generate relevant sports activity remote view depends on
     * activity state (is it new activity or not?)
     */
    private void generateRelevantSportsActivityViewAndBroadcast() {
	Intent launchIntent;
	String text;		// The label that goes for the icon
	if (isDuringActivity()) {
	    // during an activity
		// Dont' launch choose Activity but rather:
		int sportsType = ActivityUtil.getCurrentSportsType(this);
		String relavantProfile = ActivityUtil.SPORTS_TO_PROFILE.get(sportsType);
		launchIntent = 
		    ChooseActivityActivity.getColumnHandlerServiceIntent(relavantProfile);
		launchIntent.putExtra(COLUMN_HANDLER_EXTRA,true);
        text = mDuration;

	} else {		// not in an activity
	    if (DeviceUtils.isSnow2()) { // Snow2 device
		launchIntent = new Intent("com.reconinstruments.COLUMN_HANDLER_SERVICE");
		launchIntent.putExtra(COLUMN_HANDLER_EXTRA,true);
		text = NEW_ACTIVITY_SNOW;
	    }
	    else {		// JET device
		// launch choose Activity:
		launchIntent =
		    new Intent("com.reconinstruments.itemhost.chooseActivity");
		text = NEW_ACTIVITY_NON_SNOW;
	    }
	}
	    generateAndBroadcastRemoteViewIntent(R.layout.item_host_item,
						 TAG_NEW_ACTIVITY,
						 text, null, launchIntent);
    }

    private void generateAndBroadcastRemoteViewIntent(int layout, String tag, String text, Intent upLauncher, Intent downLauncher) {
        Intent intent = null;
        intent = generateRemoteViewIntent(layout,tag, text, upLauncher, downLauncher);
        sendBroadcast(intent);
    }
    
    private Intent generateRemoteViewIntent(int layout, String tag, String text, Intent upLauncher, Intent downLauncher) {
        RemoteViews remoteView = null;
        Intent intent = new Intent();
        intent.setAction(INTENT_ACTION);
        remoteView = new RemoteViews(getPackageName(), layout);
        intent.putExtra(EXTRA_TAG, tag);
        remoteView.setTextViewText(R.id.text_view, text);
        
        //specify icon for every remote view.
        if(TAG_APPS.equals(tag)){
            remoteView.setImageViewResource(R.id.image_view, R.drawable.myapps_icon);
        }
	else if(TAG_ACTIVITIES.equals(tag)){
            remoteView.setImageViewResource(R.id.image_view, R.drawable.myactivities_icon);
        }
	else if(TAG_NEW_ACTIVITY.equals(tag)){
            if(!isDuringActivity()){ // Not in an activity
		if (DeviceUtils.isSnow2()) {
		    remoteView.setImageViewResource(R.id.image_view,
						    R.drawable.snow);
		}
		else {
		    remoteView.setImageViewResource(R.id.image_view,
						    R.drawable.newactivity_icon);
		}
            }else{		// in an activity
                int sportsType =
		    ActivityUtil.getCurrentSportsType(this.getApplicationContext());
                if(sportsType == ActivityUtil.SPORTS_TYPE_CYCLING){
                    remoteView.setImageViewResource(R.id.image_view,
						    R.drawable.cycling_icon);
                }
		else if(sportsType == ActivityUtil.SPORTS_TYPE_RUNNING){
                    remoteView.setImageViewResource(R.id.image_view,
						    R.drawable.running_icon);
                }
		else if (sportsType == ActivityUtil.SPORTS_TYPE_SKI) {
		    remoteView.setImageViewResource(R.id.image_view,
						    R.drawable.snow);
		}
		else{
                    remoteView.setImageViewResource(R.id.image_view,
						    R.drawable.newactivity_icon);
                }
            }
        }else if(TAG_NOTIFICATIONS.equals(tag)){
            remoteView.setImageViewResource(R.id.image_view, R.drawable.notifications_icon);
        }else if(TAG_SETTINGS.equals(tag)){
            remoteView.setImageViewResource(R.id.image_view, R.drawable.settings_icon);
        }
        intent.putExtra(EXTRA_VIEW, remoteView);
        if(upLauncher == null){
            upLauncher = new Intent(DEFAULT_LAUNCHER);
        }
        intent.putExtra(EXTRA_UP_LAUNCHER, upLauncher);
        if(downLauncher == null){
            downLauncher = new Intent(DEFAULT_LAUNCHER);
        }
        intent.putExtra(EXTRA_DOWN_LAUNCHER, downLauncher);
        return intent;
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        super.onCreate();
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startid){
        //set delayMillis to POST_DELAYED so that we can pull duration from the transcend service
        itemHostHandler.postDelayed(broadcastRemoteView, POST_DELAYED);
        Intent i = new Intent(TRANSCEND_SERVICE);
        bindService(i, mTranscendServiceConnection, Context.BIND_AUTO_CREATE);
        registerReceiver(pullingDurationCommandReceiver, new IntentFilter(ItemHostService.INTENT_COMMAND));
        return START_STICKY;
    }

    @Override
    public void onDestroy() {
        unbindService(mTranscendServiceConnection);
        mTranscendServiceHandler.removeCallbacks(mTranscendServiceRunnable);
        itemHostHandler.removeCallbacks(broadcastRemoteView);
        try {
            unregisterReceiver(pullingDurationCommandReceiver);
        } catch (IllegalArgumentException e) {
            if (!e.getMessage().contains("Receiver not registered")) {
                e.printStackTrace();
            }
        }
        super.onDestroy();
    }

    /*
     * the following methods connect to transcend service and pull the duration value for every 
     * 0.5 seconds and then broadcast to UI layer
     */
    private final static String TRANSCEND_SERVICE = "RECON_MOD_SERVICE";
    private final static int POST_DELAYED = (int) (0.5 * 1000);
    
    private final Handler mTranscendServiceHandler = new Handler();
    
    // the messenger for handling message coming from MODService / Transcend Serivce
    private Messenger mIncomingMessenger = null;
    // the messenger for sending query message to MODService / Transcend Serivce
    private Messenger mOutgoingMessenger = null;

    // ask for latest data every 0.5 second, the result will be handled by mIncomingMessenger
    private Runnable mTranscendServiceRunnable = new Runnable() {

        @Override
        public void run() {
            Message msg = Message.obtain();
            msg.what = ReconMODServiceMessage.MSG_GET_FULL_INFO_BUNDLE;
            msg.replyTo = mIncomingMessenger;
            try {
                if(mOutgoingMessenger != null)
                    mOutgoingMessenger.send(msg);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
            startPullingDuration(POST_DELAYED);
        }

    };

    private ServiceConnection mTranscendServiceConnection = new ServiceConnection() {

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            mOutgoingMessenger = new Messenger(service);
            startPullingDuration(0l);
            mIncomingMessenger = new Messenger(new TranscendServiceMessageHandler());
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            stopPullingDuration();
            mTranscendServiceHandler.removeCallbacks(mTranscendServiceRunnable);
            mOutgoingMessenger = null;
        }

    };

    /**
     * 
     * handle the message bundle data returning back from transcend service
     *
     */
    private class TranscendServiceMessageHandler extends Handler {
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case ReconMODServiceMessage.MSG_RESULT:
                    if (msg.arg1 == ReconMODServiceMessage.MSG_GET_FULL_INFO_BUNDLE) {
                        Bundle data = msg.getData();
                        mDuration = getDuration(data);
                        generateRelevantSportsActivityViewAndBroadcast();
                    }
                    break;
                default:
                    super.handleMessage(msg);
            }
        }
    }

    /**
     * pull duration from the bundle, return "NEW ACTIVITY" or real
     * time-formatted duration depends on activity state.
     * @param data
     * @return
     */
    private String getDuration(Bundle data){
        Bundle bundle = (Bundle) data.get("SPORTS_ACTIVITY_BUNDLE");
        if (bundle != null) {
            int status = bundle.getInt("Status"); // 0 no activiy, 1, ongoing, 2 paused
            if(status == 0){
                stopPullingDuration(); // stop pulling when there is no activity
                return NO_DURATION;
            }
            long value = bundle.getLong("Durations");
            if(value > 0){
                SimpleDateFormat df = null;
                if(value < 60*60*1000){
                    df = new SimpleDateFormat("mm:ss");
                }else{
                    df = new SimpleDateFormat("H:mm:ss");
                }
                df.setTimeZone(TimeZone.getTimeZone("GMT"));
                return df.format(value);
            }
        }
        return NO_DURATION;
    }
    
    /*
     * the following methods deal with starting and stopping pulling
     * duration from transcend service depends on which screen the
     * user stay on
     */
    private void startPullingDuration(long delay){
        mTranscendServiceHandler.postDelayed(mTranscendServiceRunnable, delay);
    }
    
    private void stopPullingDuration(){
        mTranscendServiceHandler.removeCallbacks(mTranscendServiceRunnable);
    }
    
    public final static String INTENT_COMMAND = "com.reconinstruments.itemhost.COMMAND";
    public final static String EXTRA_COMMAND = "COMMAND";
    public final static int COMMAND_START_PULLING = 0;
    public final static int COMMAND_STOP_PULLING = 1;
    
    // receive the pulling duration request from the ui then take action.
    private final BroadcastReceiver pullingDurationCommandReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            int command = intent.getExtras().getInt(ItemHostService.EXTRA_COMMAND, -1);
            if(COMMAND_START_PULLING == command){
                startPullingDuration(0l);
            }else if(COMMAND_STOP_PULLING == command){
                stopPullingDuration();
            }
        }
    };
}
