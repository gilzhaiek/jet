package com.reconinstruments.dashboard;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Typeface;
import android.support.v4.app.Fragment;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.style.ForegroundColorSpan;
import android.util.Log;
import android.os.Bundle;
import android.os.Handler;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RemoteViews;
import android.widget.TextView;
import android.widget.Toast;

import com.reconinstruments.commonwidgets.BreadcrumbView;
import com.reconinstruments.utils.UIUtils;

/**
 * <code>DashboardFragment</code> is a fragment that holds two small
 * views. The views are typically remote views that are generated by
 * entitites outside and then pushed to the fragment. One entity that
 * generates these views is <code>DashboardService</code>. 
 */
public final class DashboardFragment extends Fragment {
    private static final String TAG = DashboardFragment.class.getSimpleName();
    
    private int mPos;
    private int mSize;
    private Toast breadcrumbToast;
    private BreadcrumbView mBreadcrumbView;
    private Typeface semiboldTypeface;
    private Handler mHandler = new Handler();
    
    public DashboardFragment() {
    }
    
    public DashboardFragment(Activity activity, int size, int pos) {
        mSize = size;
        mPos = pos;
        semiboldTypeface = UIUtils.getFontFromRes(activity.getApplicationContext(), R.raw.opensans_semibold);
    }
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment, container, false);
		return v;
	}

    @Override
    public void onPause() {
        // TODO Auto-generated method stub
        super.onPause();
        hideVertBreadcrumb();
    }

    @Override
    public void onResume() {
        // TODO Auto-generated method stub
        super.onResume();
        showVertBreadcrumb(this.getActivity().getApplicationContext(), mSize, mPos);
    }

    /**
     * update the samll widget view according to data bundle or remote view passing in.
     */
    public void updateSmallWidget(Context context, Intent intent){
        int extraType = intent.getIntExtra(MetricManager.EXTRA_TYPE, MetricManager.TYPE_DATA_BUNDLE);
        if(extraType == MetricManager.TYPE_DATA_BUNDLE){
            Bundle b = intent.getExtras().getBundle(MetricManager.EXTRA_WIDGET);
            SmallWidget widget = new SmallWidget(b);
            updateSmallWidget(widget);
        }else{ //remote views
            RemoteViews views = (RemoteViews)intent.getParcelableExtra(MetricManager.EXTRA_WIDGET);
            replaceAsRemoteView(context, intent, views);
        }
    }
    
    private void replaceAsRemoteView(Context context, Intent intent, RemoteViews views){
        ViewGroup vg = null;
        int slot = intent.getIntExtra(MetricManager.EXTRA_SLOT, 0);
        if((mPos == 0 && slot == 1) || (mPos == 1 && slot == 3) || (mPos == 2 && slot == 5) || (mPos == 3 && slot == 7)){ // left side
            vg = (ViewGroup) getView().findViewById(R.id.left_layout);
        }else if((mPos == 0 && slot == 2) || (mPos == 1 && slot == 4) || (mPos == 2 && slot == 6) || (mPos == 3 && slot == 8)){ // right side
            vg = (ViewGroup) getView().findViewById(R.id.right_layout);
        }
        View inflatedView = views.apply(context, vg);
        if (vg.getChildCount() > 0) {
            vg.removeAllViews();
        }
        vg.addView(inflatedView);
        vg.invalidate();
    }
    
    private void updateSmallWidget(SmallWidget widget){
        int slot = widget.getSlot();
        int disconnectedIcon = widget.getDisconnectedIcon();
        RelativeLayout validLeftLayout = (RelativeLayout)(getView().findViewById(R.id.valid_left_layout));
        LinearLayout inValidLeftLayout = (LinearLayout)(getView().findViewById(R.id.invalid_left_layout));
        RelativeLayout validRightLayout = (RelativeLayout)(getView().findViewById(R.id.valid_right_layout));
        LinearLayout inValidRightLayout = (LinearLayout)(getView().findViewById(R.id.invalid_right_layout));
        
        if((mPos == 0 && slot == 1) || (mPos == 1 && slot == 3) || (mPos == 2 && slot == 5) || (mPos == 3 && slot == 7)){ // left side
            validLeftLayout.setVisibility(View.VISIBLE);
            inValidLeftLayout.setVisibility(View.GONE);
            TextView value1TV = (TextView)getView().findViewById(R.id.value1);
            value1TV.setTypeface(semiboldTypeface);
            value1TV.setText(spanText(widget.getValue()));
            TextView unit1TV = (TextView)getView().findViewById(R.id.unit1);
            unit1TV.setTypeface(semiboldTypeface);
            unit1TV.setText(widget.getUnit());
            if(!widget.getValue().contains(":")){ 
                unit1TV.setVisibility(View.VISIBLE);
                value1TV.setLayoutParams(new LayoutParams(146, LayoutParams.MATCH_PARENT));
            }else{
                value1TV.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
                unit1TV.setVisibility(View.GONE);
            }
        }else if((mPos == 0 && slot == 2) || (mPos == 1 && slot == 4) || (mPos == 2 && slot == 6) || (mPos == 3 && slot == 8)){ // right side
            validRightLayout.setVisibility(View.VISIBLE);
            inValidRightLayout.setVisibility(View.GONE);
            TextView value2TV = (TextView)getView().findViewById(R.id.value2);
            value2TV.setTypeface(semiboldTypeface);
            value2TV.setText(spanText(widget.getValue()));
            TextView unit2TV = (TextView)getView().findViewById(R.id.unit2);
            unit2TV.setTypeface(semiboldTypeface);
            unit2TV.setText(widget.getUnit());
            if(!widget.getValue().contains(":")){ 
                unit2TV.setVisibility(View.VISIBLE);
                value2TV.setLayoutParams(new LayoutParams(146, LayoutParams.MATCH_PARENT));
            }else{
                value2TV.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
                unit2TV.setVisibility(View.GONE);
            }
        }
    }
    
    public void hideVertBreadcrumb(){
        if(breadcrumbToast != null){
            breadcrumbToast.cancel();
            breadcrumbToast = null;
        }
    }

    public void showVertBreadcrumb(final Context context, final int size, final int currentPosition) {
        mHandler.removeCallbacksAndMessages(null);

        mHandler.postDelayed(new Runnable() { 
            public void run() { 
                if(context != null){
                    int[] dashFrags = new int[size];
                    for(int i=0; i<dashFrags.length; i++)
                        dashFrags[i] = BreadcrumbView.DYNAMIC_ICON;

                    mBreadcrumbView = new BreadcrumbView(context, false, currentPosition, dashFrags);

                    mBreadcrumbView.invalidate();

                    if(breadcrumbToast == null) 
                        breadcrumbToast = Toast.makeText(context, "", Toast.LENGTH_SHORT);

                    breadcrumbToast.setGravity(Gravity.RIGHT | Gravity.BOTTOM, 0, 0);
                    breadcrumbToast.setView(mBreadcrumbView);
                    breadcrumbToast.show();
                }
            }
        }, 0 ); 
        
    }
    
    private Spannable spanText(String value){
        Spannable wordToSpan = new SpannableString(value);
        if(value.endsWith("---") || value.startsWith("000")){
            wordToSpan.setSpan(new ForegroundColorSpan(Color.DKGRAY), 0, 3, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        }else if(value.startsWith("00:00")){
            wordToSpan.setSpan(new ForegroundColorSpan(Color.DKGRAY), 0, 5, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        }else if(value.startsWith("+00") || value.startsWith("-00")){
            wordToSpan.setSpan(new ForegroundColorSpan(Color.DKGRAY), 1, 3, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        }else if(value.startsWith("00")){
            wordToSpan.setSpan(new ForegroundColorSpan(Color.DKGRAY), 0, 2, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        }else if(value.startsWith("+0") || value.startsWith("-0")){
            wordToSpan.setSpan(new ForegroundColorSpan(Color.DKGRAY), 1, 2, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        }else if(value.startsWith("0")){
            wordToSpan.setSpan(new ForegroundColorSpan(Color.DKGRAY), 0, 1, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        }
        return wordToSpan;
    }
}
